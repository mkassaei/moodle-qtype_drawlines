{"version":3,"file":"question.min.js","sources":["../src/question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript to allow dragging options for lines (using mouse down or touch) or tab through lines using keyboard.\n *\n * @module     qtype_drawlines/question\n * @copyright  2024 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery',\n    'core/dragdrop',\n    'qtype_drawlines/line',\n    'core/key_codes',\n    'core_form/changechecker',\n], function(\n    $,\n    dragDrop,\n    Line,\n) {\n\n    \"use strict\";\n\n    /**\n     * Object to handle one drag-drop markers question.\n     *\n     * @param {String} containerId id of the outer div for this question.\n     * @param {boolean} readOnly whether the question is being displayed read-only.\n     * @param {Object[]} visibleDropZones the geometry of any drop-zones to show.\n     *      Objects have fields line, coords and markertext.\n     * @param {line[]} questionLines\n     * @constructor\n     */\n    function DrawlinesQuestion(containerId, readOnly, visibleDropZones, questionLines) {\n        var thisQ = this;\n        this.containerId = containerId;\n        this.visibleDropZones = visibleDropZones;\n        this.questionLines = questionLines;\n        M.util.js_pending('qtype_drawlines-init-' + this.containerId);\n        this.lineSVGs = [];\n        this.lines = [];\n        this.svgEl = null;\n        this.isPrinting = false;\n        if (readOnly) {\n            this.getRoot().classList.add('qtype_drawlines-readonly');\n        }\n        let bgImage = this.bgImage();\n        thisQ.createSvgOnImageLoad(bgImage);\n    }\n\n    /**\n     * Update the coordinates from a particular string.\n     */\n    DrawlinesQuestion.prototype.updateCoordinates = function() {\n        // We don't need to scale the shape for editing form.\n        for (var line = 0; line < this.lineSVGs.length; line++) {\n            var coordinates = this.getSVGLineCoordinates(this.lineSVGs[line]);\n            if (!this.lines[line].parse(coordinates[0], coordinates[1], 1)) {\n                // Invalid coordinates. Don't update the preview.\n                return;\n            }\n            this.updateSvgEl(line);\n        }\n    };\n\n    /**\n     * Parse the coordinates from a particular string.\n     *\n     * @param {String} coordinates The coordinates to be parsed. The values are in the format: x1,y1 x2,y2.\n     *                             Except for infinite line type where it's in the format x1,y1 x2,y2, x3,y3, x4,y4.\n     *                             Here, x1,y1 and x4,y4 are the two very end points of the infinite line and\n     *                             x2,y2 and x3,y3 are the pints with the handles.\n     * @param {String} lineType The type of the line.\n     */\n    DrawlinesQuestion.prototype.parseCoordinates = function(coordinates, lineType) {\n        var bits = coordinates.split(' ');\n        if (lineType === 'lineinfinite' && bits.length !== 2) {\n            // Remove the first and last coordinates.\n            bits = bits.slice(1, -1);\n        }\n        if (bits.length !== 2) {\n            throw new Error(coordinates + ' is not a valid point');\n        }\n        return bits;\n    };\n\n    /**\n     * Draws the svg lines of any drop zones that should be visible for feedback purposes.\n     */\n    DrawlinesQuestion.prototype.drawDropzone = function() {\n        let rootElement = this.getRoot(),\n            bgImage = this.bgImage(),\n            svg = rootElement.querySelector('svg.dropzones');\n        rootElement.querySelector('.que-dlines-dropzone').style.position = 'relative';\n        rootElement.querySelector('.que-dlines-dropzone').style.top = (bgImage.height + 1) * -1 + \"px\";\n        rootElement.querySelector('.que-dlines-dropzone').style.height = bgImage.height + \"px\";\n        rootElement.querySelector('.droparea').style.height = bgImage.height + \"px\";\n        if (!svg) {\n            let dropZone = rootElement.querySelector('.que-dlines-dropzone');\n            dropZone.innerHTML =\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" ' +\n                    'class= \"dropzones\" ' +\n                    'width=\"' + bgImage.width + '\" ' +\n                    'height=\"' + bgImage.height + '\" ' +\n                    'viewBox=\"0 0 ' + bgImage.width + ' ' + bgImage.height + '\" ' +\n                    'preserveAspectRatio=\"xMinYMin meet\" ' +\n                '></svg>';\n            this.drawSVGLines(this.questionLines);\n        }\n    };\n\n    /**\n     * Draws the svg lines of any drop zones.\n     *\n     * @param {Object[]} questionLines\n     */\n    DrawlinesQuestion.prototype.drawSVGLines = function(questionLines) {\n        let bgImage = this.bgImage(),\n            rootElement = this.getRoot(),\n            height, startcoordinates, endcoordinates, draginitialcoords;\n\n        let drags = rootElement.querySelector('.draghomes');\n        drags.innerHTML =\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"dragshome\" ' +\n            'width=\"' + bgImage.width + '\" ' +\n            'height=\"' + questionLines.length * 50 + '\"' +\n            '></svg>';\n\n        let draghomeSvg = rootElement.querySelector('.dragshome'),\n            dropzoneSvg = rootElement.querySelector('.dropzones');\n        const initiallinespacing = 25,\n            spacingbetweenlines = 50;\n        for (let line = 0; line < this.questionLines.length; line++) {\n            height = initiallinespacing + (line * spacingbetweenlines);\n            startcoordinates = '50,' + height + ';10';\n            endcoordinates = '200,' + height + ';10';\n\n            // Check if the lines are to be set with initial coordinates.\n            draginitialcoords = this.visibleDropZones['c' + line];\n            if (draginitialcoords !== undefined && draginitialcoords !== '') {\n                // The visibleDropZones array holds the response in the format x1,y1 x2,y2 - to be added to svgdropzone.\n                var coords = this.parseCoordinates(draginitialcoords, questionLines[line].type);\n                startcoordinates = coords[0] + ';10';\n                endcoordinates = coords[1] + ';10';\n                this.lines[line] = Line.make(\n                    [startcoordinates, endcoordinates],\n                    questionLines[line].type,\n                    [questionLines[line].labelstart, questionLines[line].labelmiddle, questionLines[line].labelend]\n                );\n                this.addToSvg(line, dropzoneSvg);\n            } else {\n                // Need to be added to draghomeSvg.\n                this.lines[line] = Line.make(\n                    [startcoordinates, endcoordinates],\n                    questionLines[line].type,\n                    [questionLines[line].labelstart, questionLines[line].labelmiddle, questionLines[line].labelend]\n                );\n                this.addToSvg(line, draghomeSvg);\n            }\n        }\n        M.util.js_complete('qtype_drawlines-init-' + this.containerId);\n    };\n\n    /**\n     * Handle when the window is resized.\n     */\n    DrawlinesQuestion.prototype.handleResize = function() {\n        let thisQ = this,\n            bgImg = this.bgImage(),\n            bgRatio = this.bgRatio(),\n            svgdropzones,\n            svgdraghomes;\n\n        // Calculate and set the svg attributes.\n        // We need to call drawDropzone function to make sure the svg's are created before updating the attributes.\n        thisQ.drawDropzone();\n        svgdropzones = this.getRoot().querySelector('div.droparea svg.dropzones');\n        svgdraghomes = this.getRoot().querySelector('div.draghomes svg.dragshome');\n        svgdropzones.setAttribute(\"width\", bgImg.width);\n        svgdropzones.setAttribute(\"height\", bgImg.height);\n        svgdropzones.setAttribute(\"viewBox\", '0 0 ' + bgImg.width + ' ' + bgImg.height);\n\n        svgdraghomes.setAttribute(\"width\", bgImg.width);\n        svgdraghomes.setAttribute(\"height\", parseInt(thisQ.questionLines.length * 50 * bgRatio));\n\n        // Transform the svg lines to scale based on window size.\n        for (let linenumber = 0; linenumber < thisQ.questionLines.length; linenumber++) {\n            var svgline = thisQ.getRoot().querySelector('.dropzone.choice' + linenumber);\n            thisQ.handleElementScale(svgline);\n        }\n    };\n\n    /**\n     * Return the background ratio.\n     *\n     * @returns {number} Background ratio.\n     */\n    DrawlinesQuestion.prototype.bgRatio = function() {\n        var bgImg = this.bgImage();\n        var bgImgNaturalWidth = bgImg.naturalWidth;\n        var bgImgClientWidth = bgImg.width;\n        // Sometimes the width is returned 0, when image is not loaded properly.\n        if (bgImgClientWidth === 0) {\n            return 1;\n        }\n        return bgImgClientWidth / bgImgNaturalWidth;\n    };\n\n    /**\n     * Scale the drag if needed.\n     *\n     * @param {SVGElement} element the line to place.\n     */\n    DrawlinesQuestion.prototype.handleElementScale = function(element) {\n        var bgRatio = this.bgRatio();\n        if (this.isPrinting) {\n            bgRatio = 1;\n        }\n        element.setAttribute('transform', 'scale(' + bgRatio + ')');\n    };\n\n    /**\n     * Get the outer div for this question.\n     *\n     * @return {*}\n     */\n    DrawlinesQuestion.prototype.getRoot = function() {\n        return document.getElementById(this.containerId);\n    };\n\n    /**\n     * Get the img that is the background image.\n     *\n     * @returns {element|undefined} the DOM element (if any)\n     */\n    DrawlinesQuestion.prototype.bgImage = function() {\n        return this.getRoot().querySelector('img.dropbackground');\n    };\n\n    /**\n     * Returns the coordinates for the line from the SVG.\n     * @param {SVGElement} svgEl\n     * @returns {Array} the coordinates.\n     */\n    DrawlinesQuestion.prototype.getSVGLineCoordinates = function(svgEl) {\n\n        var circleStartXCoords = svgEl.childNodes[1].getAttribute('cx');\n        var circleStartYCoords = svgEl.childNodes[1].getAttribute('cy');\n        var circleStartRCoords = svgEl.childNodes[1].getAttribute('r');\n        var circleEndXCoords = svgEl.childNodes[2].getAttribute('cx');\n        var circleEndYCoords = svgEl.childNodes[2].getAttribute('cy');\n        var circleEndRCoords = svgEl.childNodes[2].getAttribute('r');\n        return [circleStartXCoords + ',' + circleStartYCoords + ';' + circleStartRCoords,\n            circleEndXCoords + ',' + circleEndYCoords + ';' + circleEndRCoords];\n    };\n\n    /**\n     * Add this line to an SVG graphic.\n     *\n     * @param {int} lineNumber Line Number\n     * @param {SVGElement} svg the SVG image to which to add this drop zone.\n     */\n    DrawlinesQuestion.prototype.addToSvg = function(lineNumber, svg) {\n        let bgImage = this.bgImage();\n        this.lineSVGs[lineNumber] = this.lines[lineNumber].makeSvg(svg, bgImage.naturalWidth,\n            bgImage.naturalHeight);\n        if (!this.lineSVGs[lineNumber]) {\n            return;\n        }\n        this.lineSVGs[lineNumber].setAttribute('data-dropzone-no', lineNumber);\n        if (svg.getAttribute('class') === 'dropzones') {\n            this.lineSVGs[lineNumber].setAttribute('class', 'dropzone choice' + lineNumber + ' placed');\n        } else {\n            this.lineSVGs[lineNumber].setAttribute('class', 'dropzone choice' + lineNumber + ' inactive');\n        }\n    };\n\n    /**\n     * Update the line of this drop zone in an SVG image.\n     *\n     * @param {int} dropzoneNo\n     */\n    DrawlinesQuestion.prototype.updateSvgEl = function(dropzoneNo) {\n        var bgimage = this.bgImage();\n        this.lines[dropzoneNo].updateSvg(this.lineSVGs[dropzoneNo], bgimage.naturalWidth, bgimage.naturalHeight);\n    };\n\n    /**\n     * Start responding to dragging the move handle attached to the line ends (circles).\n     *\n     * @param {Event} e Event object\n     * @param {String} whichHandle which circle handle was moved, i.e., startcircle or endcircle.\n     * @param {int} dropzoneNo\n     */\n    DrawlinesQuestion.prototype.handleCircleMove = function(e, whichHandle, dropzoneNo) {\n        var info = dragDrop.prepare(e);\n        if (!info.start) {\n            return;\n        }\n        var movingDropZone = this,\n            lastX = info.x,\n            lastY = info.y,\n            dragProxy = this.makeDragProxy(info.x, info.y),\n            bgimage = this.bgImage(),\n            maxX = bgimage.naturalWidth,\n            maxY = bgimage.naturalHeight;\n\n        dragDrop.start(e, $(dragProxy), function(pageX, pageY) {\n            movingDropZone.lines[dropzoneNo].move(whichHandle,\n                parseInt(pageX) - parseInt(lastX), parseInt(pageY) - parseInt(lastY), parseInt(maxX), parseInt(maxY));\n            lastX = pageX;\n            lastY = pageY;\n            movingDropZone.updateSvgEl(dropzoneNo);\n            movingDropZone.saveCoordsForChoice(dropzoneNo);\n        }, function() {\n            document.body.removeChild(dragProxy);\n        });\n    };\n\n    /**\n     * Start responding to dragging the move handle attached to the line.\n     *\n     * @param {Event} e Event object\n     * @param {int} dropzoneNo\n     */\n    DrawlinesQuestion.prototype.handleLineMove = function(e, dropzoneNo) {\n        var info = dragDrop.prepare(e);\n        if (!info.start) {\n            return;\n        }\n        var movingDrag = this,\n            lastX = info.x,\n            lastY = info.y,\n            dragProxy = this.makeDragProxy(info.x, info.y),\n            maxX,\n            maxY,\n            whichSVG = \"\",\n            bgImage = this.bgImage(),\n            isMoveFromDragsToDropzones,\n            isMoveFromDropzonesToDrags,\n            svgClass;\n\n        var selectedElement = this.lineSVGs[dropzoneNo];\n\n        let dropX, dropY;\n        if (e.type === 'mousedown') {\n            dropX = e.clientX;\n            dropY = e.clientY;\n        } else if (e.type === 'touchstart') {\n            dropX = e.touches[0].clientX;\n            dropY = e.touches[0].clientY;\n        }\n        dragDrop.start(e, $(dragProxy), function(pageX, pageY) {\n\n            // The svg's which are associated with this question.\n            var closestSVGs = movingDrag.getSvgsClosestToElement(selectedElement);\n\n            // Check if the drags need to be moved from one svg to another.\n            var closeTo = selectedElement.closest('svg');\n            svgClass = closeTo.getAttribute('class');\n\n            // Moving the drags between the SVG's.\n            // If true, the drag is moved from draghomes SVG to dropZone SVG.\n            isMoveFromDragsToDropzones = (svgClass === \"dragshome\");\n\n            // If true, the drag is moved from dropZone SVG to draghomes SVG.\n            isMoveFromDropzonesToDrags = (svgClass === 'dropzones') &&\n                (movingDrag.lines[dropzoneNo].centre1.y > (bgImage.naturalHeight - 20));\n\n            if (isMoveFromDragsToDropzones || isMoveFromDropzonesToDrags) {\n                movingDrag.lines[dropzoneNo].addToDropZone('mouse', selectedElement,\n                    closestSVGs.svgDropZone, closestSVGs.svgDragsHome, dropX, dropY, bgImage.naturalHeight);\n            }\n\n            // Drag the lines within the SVG\n            // Get the dimensions of the selected element's svg.\n            closeTo = selectedElement.closest('svg');\n            var dimensions = movingDrag.getSvgDimensionsByClass(closeTo, closeTo.getAttribute('class'));\n            maxX = dimensions.maxX;\n            maxY = dimensions.maxY;\n            whichSVG = dimensions.whichSVG;\n\n            // Move the lines if they are in the dropzones svg.\n            if (whichSVG === 'DropZonesSVG') {\n                movingDrag.lines[dropzoneNo].moveDrags(\n                    parseInt(pageX) - parseInt(lastX), parseInt(pageY) - parseInt(lastY),\n                    parseInt(maxX), parseInt(maxY));\n                lastX = pageX;\n                lastY = pageY;\n            }\n\n            movingDrag.updateSvgEl(dropzoneNo);\n            movingDrag.saveCoordsForChoice(dropzoneNo);\n        }, function() {\n            document.body.removeChild(dragProxy);\n        });\n    };\n\n    /**\n     * Make an invisible drag proxy.\n     *\n     * @param {int} x x position .\n     * @param {int} y y position.\n     * @returns {HTMLElement} the drag proxy.\n     */\n    DrawlinesQuestion.prototype.makeDragProxy = function(x, y) {\n        var dragProxy = document.createElement('div');\n        dragProxy.style.position = 'absolute';\n        dragProxy.style.top = y + 'px';\n        dragProxy.style.left = x + 'px';\n        dragProxy.style.width = '1px';\n        dragProxy.style.height = '1px';\n        document.body.appendChild(dragProxy);\n        return dragProxy;\n    };\n\n    /**\n     * Save the coordinates for a dropped item in the form field.\n     *\n     * @param {Number} choiceNo which copy of the choice this was.\n     **/\n    DrawlinesQuestion.prototype.saveCoordsForChoice = function(choiceNo) {\n        let imageCoords = [];\n        var items = this.getRoot().querySelector('svg g.choice' + choiceNo),\n            gEleClassAttributes = '';\n        if (items) {\n                imageCoords = items.querySelector('polyline').getAttribute('points');\n                gEleClassAttributes = items.getAttribute('class');\n        }\n        if (gEleClassAttributes !== '' && gEleClassAttributes.includes('placed')) {\n            this.getRoot().querySelector('input.choice' + choiceNo).value = imageCoords;\n        } else if (gEleClassAttributes !== '' && gEleClassAttributes.includes('inactive')) {\n            this.getRoot().querySelector('input.choice' + choiceNo).value = '';\n        }\n    };\n\n    /**\n     * Handle key down / press events on svg lines.\n     *\n     * @param {KeyboardEvent} e\n     * @param {SVGElement} drag SVG element being dragged.\n     * @param {int} dropzoneNo\n     * @param {String} activeElement The element being dragged, whether it is the line or the line endpoints.\n     */\n    DrawlinesQuestion.prototype.handleKeyPress = function(e, drag, dropzoneNo, activeElement) {\n\n        var x = 0,\n            y = 0,\n            dropzoneElement,\n            question = questionManager.getQuestionForEvent(e);\n\n        dropzoneElement = drag.closest('g');\n        switch (e.code) {\n            case 'ArrowLeft':\n            case 'KeyA': // A.\n                x = -1;\n                break;\n            case 'ArrowRight':\n            case 'KeyD': // D.\n                x = 1;\n                break;\n            case 'ArrowDown':\n            case 'KeyS': // S.\n                y = 1;\n                break;\n            case 'ArrowUp':\n            case 'KeyW': // W.\n                y = -1;\n                break;\n            case 'Space':\n            case 'Escape':\n                break;\n            default:\n                return; // Ingore other keys.\n        }\n        e.preventDefault();\n\n        // Moving the drags between the SVG's.\n        var closeTo = drag.closest('svg');\n        var svgClass = closeTo.getAttribute('class');\n        var maxX,\n            maxY,\n            whichSVG;\n        var bgImage = this.bgImage();\n        var closestSVGs = this.getSvgsClosestToElement(drag);\n        var isMoveFromDragsToDropzones = (svgClass === \"dragshome\");\n        var isMoveFromDropzonesToDrags = (svgClass === 'dropzones') &&\n            (question.lines[dropzoneNo].centre1.y > ((bgImage.naturalHeight - 20)));\n\n        if (isMoveFromDragsToDropzones) {\n            question.lines[dropzoneNo].addToDropZone('keyboard', dropzoneElement,\n                closestSVGs.svgDropZone, closestSVGs.svgDragsHome, null, null, bgImage.naturalHeight, 'DragsSVG');\n        } else if (isMoveFromDropzonesToDrags) {\n            question.lines[dropzoneNo].addToDropZone('keyboard', dropzoneElement,\n                closestSVGs.svgDropZone, closestSVGs.svgDragsHome, null, null, null, 'DropZonesSVG');\n        }\n\n        // Get the dimensions of the selected element's svg.\n        closeTo = drag.closest('svg');\n        var dimensions = question.getSvgDimensionsByClass(closeTo, closeTo.getAttribute('class'));\n        maxX = dimensions.maxX;\n        maxY = dimensions.maxY;\n        whichSVG = dimensions.whichSVG;\n\n        if (activeElement === 'line' && whichSVG === 'DropZonesSVG') {\n            // Move the entire line when the focus is on it.\n            question.lines[dropzoneNo].moveDrags(parseInt(x), parseInt(y), parseInt(maxX), parseInt(maxY));\n        } else {\n            // Move the line endpoints.\n            question.lines[dropzoneNo].move(activeElement, parseInt(x), parseInt(y), parseInt(maxX), parseInt(maxY));\n        }\n        question.updateSvgEl(dropzoneNo);\n        this.saveCoordsForChoice(dropzoneNo);\n        drag.focus();\n    };\n\n    /**\n     * Returns the dimensions of the SVG image to which the drag element belongs.\n     *\n     * @param {SVG} dragSVG The SVG to which the drag element belongs.\n     * @param {String} className Class asscociated with the SVG\n     * @return {{whichSVG: (string), maxY: number, maxX: number}}\n     */\n    DrawlinesQuestion.prototype.getSvgDimensionsByClass = function(dragSVG, className) {\n        let bgImg = this.bgImage();\n        return {\n            maxX: bgImg.naturalWidth,\n            maxY: bgImg.naturalHeight,\n            whichSVG: className === 'dragshome' ? 'DragsSVG' : 'DropZonesSVG'\n        };\n    };\n\n    /**\n     * Returns the SVG's to which the drag element belongs.\n     *\n     * @param {SVGElement} dragElement The element which is being moved.\n     * @return {{svgDragsHome, svgDropZone}}\n     */\n    DrawlinesQuestion.prototype.getSvgsClosestToElement = function(dragElement) {\n        var svgElement = dragElement.closest('svg');\n        var svgElementClass = svgElement.getAttribute('class');\n        var svgDragsHome, svgDropZone, parent;\n\n        if (svgElementClass === \"dragshome\") {\n            svgDragsHome = svgElement;\n            parent = svgElement.closest('.ddarea');\n            svgDropZone = parent.querySelector('.dropzones');\n        } else {\n            svgDropZone = svgElement;\n            parent = svgElement.closest('.ddarea');\n            svgDragsHome = parent.querySelector('.dragshome');\n        }\n        return {\n            svgDropZone: svgDropZone,\n            svgDragsHome: svgDragsHome\n        };\n    };\n\n    /**\n     * Loading SVG image.\n     *\n     * @param {HTMLImageElement}  img\n     */\n    DrawlinesQuestion.prototype.createSvgOnImageLoad = function(img) {\n        if (!img) {\n            window.console.error(`Image with id '${img}' not found.`);\n            return;\n        }\n\n        // Check if the image is already loaded\n        if (img.complete && img.naturalHeight !== 0) {\n            this.drawDropzone();\n        } else {\n            // Add an event listener for the load event\n            img.addEventListener('load', () => this.drawDropzone());\n        }\n    };\n\n    /**\n     * Singleton that tracks all the DrawlinesQuestions on this page, and deals\n     * with event dispatching.\n     *\n     * @type {Object}\n     */\n    var questionManager = {\n\n        /**\n         * {boolean} ensures that the event handlers are only initialised once per page.\n         */\n        eventHandlersInitialised: false,\n\n        /**\n         * {Object} ensures that the marker event handlers are only initialised once per question,\n         * indexed by containerId (id on the .que div).\n         */\n        lineEventHandlersInitialised: {},\n\n        /**\n         * {boolean} is printing or not.\n         */\n        isPrinting: false,\n\n        /**\n         * {boolean} is keyboard navigation.\n         */\n        isKeyboardNavigation: false,\n\n        /**\n         * {Object} all the questions on this page, indexed by containerId (id on the .que div).\n         */\n        questions: {}, // An object containing all the information about each question on the page.\n\n        /**\n         * @var {int} the number of lines on the form.\n         */\n        noOfLines: null,\n\n        /**\n         * @var {DrawlinesQuestion[]} the lines in the preview, indexed by line number.\n         */\n        dropZones: [],\n\n        /**\n         * @var {line[]} the question lines in the preview, indexed by line number.\n         */\n        questionLines: [],\n\n        /**\n         * Initialise one question.\n         *\n         * @param {String} containerId the id of the div.que that contains this question.\n         * @param {boolean} readOnly whether the question is read-only.\n         * @param {Object[]} visibleDropZones data on any drop zones to draw as part of the feedback.\n         * @param {Object[]} questionLines\n         */\n        init: function(containerId, readOnly, visibleDropZones, questionLines) {\n            questionManager.questions[containerId] =\n                new DrawlinesQuestion(containerId, readOnly, visibleDropZones, questionLines);\n\n            questionManager.questions[containerId].updateCoordinates();\n            if (!questionManager.eventHandlersInitialised) {\n                // Make sure all the images are loaded before setting up resizing event handlers.\n                // This was bit tricky as if the images are not loaded then the image height and width would be\n                // set to 0, thus causing improper loading of the lines.\n                const dropareaimages = document.querySelectorAll('.drawlines .droparea img');\n                questionManager.checkAllImagesLoaded(dropareaimages)\n                    .then((dropareaimages) => {\n                        questionManager.setupEventHandlers();\n                        questionManager.eventHandlersInitialised = true;\n                        return dropareaimages;\n                })\n                .catch(error => window.console.error(error));\n            }\n\n            if (!questionManager.lineEventHandlersInitialised.hasOwnProperty(containerId)) {\n                questionManager.lineEventHandlersInitialised[containerId] = true;\n\n                var questionContainer = document.getElementById(containerId);\n                if (questionContainer.classList.contains('drawlines') &&\n                    !questionContainer.classList.contains('qtype_drawlines-readonly')) {\n\n                    // Add event listeners to the 'previewArea'.\n                    // For dropzone SVG.\n                    var dropArea = questionContainer.querySelector('.droparea');\n                    // Add event listener for mousedown and touchstart events.\n                    dropArea.addEventListener('mousedown', questionManager.handleDropZoneEventMove);\n                    dropArea.addEventListener('touchstart', questionManager.handleDropZoneEventMove);\n                    // Add event listener for keydown and keypress events.\n                    dropArea.addEventListener('keydown', questionManager.handleKeyPress);\n                    dropArea.addEventListener('keypress', questionManager.handleKeyPress);\n\n                    dropArea.addEventListener('focusin', function(e) {\n                        questionManager.handleKeyboardFocus(e, true);\n                    });\n                    dropArea.addEventListener('focusout', function(e) {\n                        questionManager.handleKeyboardFocus(e, false);\n                    });\n\n                    // For draghomes SVG.\n                    var drags = questionContainer.querySelector('.draghomes');\n                    // Add event listener for mousedown and touchstart events.\n                    drags.addEventListener('mousedown', questionManager.handleDragHomeEventMove);\n                    drags.addEventListener('touchstart', questionManager.handleDragHomeEventMove);\n                    // Add event listener for keydown and keypress events.\n                    drags.addEventListener('keydown', questionManager.handleKeyPress);\n                    drags.addEventListener('keypress', questionManager.handleKeyPress);\n\n                    drags.addEventListener('focusin', function(e) {\n                        questionManager.handleKeyboardFocus(e, true);\n                    });\n                    drags.addEventListener('focusout', function(e) {\n                        questionManager.handleKeyboardFocus(e, false);\n                    });\n                }\n            }\n        },\n\n        /**\n         * Verify that all the images are loaded on this page.\n         * @param {NodeList} images\n         **/\n        checkAllImagesLoaded: function(images) {\n            const promises = Array.from(images).map(img =>\n                new Promise((resolve, reject) => {\n                    if (img.complete && img.naturalHeight !== 0) {\n                        resolve(img); // Image already loaded\n                    } else {\n                        img.addEventListener('load', () => resolve(img), {once: true});\n                        img.addEventListener('error', () => reject(new Error(`Failed to load image: ${img.src}`)), {once: true});\n                    }\n                })\n            );\n            return Promise.all(promises);\n        },\n\n        /**\n         * Set up the event handlers that make this question type work. (Done once per page.)\n         */\n        setupEventHandlers: function() {\n            window.addEventListener('resize', function() {\n                questionManager.handleWindowResize(false);\n            });\n            window.addEventListener('beforeprint', function() {\n                questionManager.isPrinting = true;\n                questionManager.handleWindowResize(questionManager.isPrinting);\n            });\n            window.addEventListener('afterprint', function() {\n                questionManager.isPrinting = false;\n                questionManager.handleWindowResize(questionManager.isPrinting);\n            });\n            setTimeout(function() {\n                questionManager.fixLayoutIfThingsMoved();\n            }, 100);\n        },\n\n        /**\n         * Sometimes, despite our best efforts, things change in a way that cannot\n         * be specifically caught (e.g. dock expanding or collapsing in Boost).\n         * Therefore, we need to periodically check everything is in the right position.\n         */\n        fixLayoutIfThingsMoved: function() {\n            if (!questionManager.isKeyboardNavigation) {\n                this.handleWindowResize(questionManager.isPrinting);\n            }\n            // We use setTimeout after finishing work, rather than setInterval,\n            // in case positioning things is slow. We want 100 ms gap\n            // between executions, not what setInterval does.\n            setTimeout(function() {\n                questionManager.fixLayoutIfThingsMoved(questionManager.isPrinting);\n            }, 100);\n        },\n\n        /**\n         * Handle mouse and touch events for dropzone svg.\n         *\n         * @param {Event} event\n         */\n        handleDropZoneEventMove: function(event) {\n            var dropzoneElement, dropzoneNo;\n            var question = questionManager.getQuestionForEvent(event);\n            if (event.target.closest('.dropzone .startcircle.shape')) {\n                // Dragging the move handle circle attached to the start of the line.\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleCircleMove(event, 'startcircle', dropzoneNo);\n            } else if (event.target.closest('.dropzone .endcircle.shape')) {\n                // Dragging the move handle circle attached to the end of the line.\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleCircleMove(event, 'endcircle', dropzoneNo);\n            } else if (event.target.closest('polyline.shape')) {\n                // Dragging the entire line.\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleLineMove(event, dropzoneNo);\n            }\n        },\n\n        /**\n         * Handle mouse and touch events for dragshome svg.\n         *\n         * @param {Event} event\n         */\n        handleDragHomeEventMove: function(event) {\n            let dropzoneElement, dropzoneNo,\n                question = questionManager.getQuestionForEvent(event);\n\n            if (event.target.closest('g')) {\n                dropzoneElement = event.target.closest('g');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                question.handleLineMove(event, dropzoneNo);\n                question.saveCoordsForChoice(dropzoneNo);\n            }\n        },\n\n        /**\n         * Handle key down / press events on markers.\n         *\n         * @param {Event} e\n         */\n        handleKeyPress: function(e) {\n            var question = questionManager.getQuestionForEvent(e);\n            var dropzoneElement, dropzoneNo, drag, activeElement;\n            if (e.target.closest('.dropzone circle.startcircle')) {\n                dropzoneElement = e.target.closest('.dropzone');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                drag = e.target.closest('.dropzone circle.startcircle');\n                activeElement = 'startcircle';\n            } else if (e.target.closest('.dropzone circle.endcircle')) {\n                drag = e.target.closest('.dropzone circle.endcircle');\n                dropzoneElement = e.target.closest('.dropzone');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                activeElement = 'endcircle';\n            } else if (e.target.closest('g.dropzone')) {\n                drag = e.target.closest('g.dropzone');\n                dropzoneElement = e.target.closest('.dropzone');\n                dropzoneNo = dropzoneElement.dataset.dropzoneNo;\n                activeElement = 'line';\n            }\n            if (question && dropzoneElement) {\n                question.handleKeyPress(e, drag, dropzoneNo, activeElement);\n            }\n        },\n\n        /**\n         * Handle when the window is resized.\n         * @param {boolean} isPrinting\n         */\n        handleWindowResize: function(isPrinting) {\n            for (var containerId in questionManager.questions) {\n                if (questionManager.questions.hasOwnProperty(containerId)) {\n                    questionManager.questions[containerId].isPrinting = isPrinting;\n                    questionManager.questions[containerId].handleResize();\n                }\n            }\n        },\n\n        /**\n         * Handle focus lost events on markers.\n         * @param {Event} e\n         * @param {boolean} isNavigating\n         */\n        handleKeyboardFocus: function(e, isNavigating) {\n            questionManager.isKeyboardNavigation = isNavigating;\n        },\n\n        /**\n         * Given an event, work out which question it effects.\n         *\n         * @param {Event} e the event.\n         * @returns {DrawlinesQuestion|undefined} The question, or undefined.\n         */\n        getQuestionForEvent: function(e) {\n            var containerId = $(e.currentTarget).closest('.que.drawlines').attr('id');\n            return questionManager.questions[containerId];\n        },\n    };\n\n    /**\n     * @alias module:qtype_drawlines/question\n     */\n    return {\n        /**\n         * Initialise one drag-drop markers question.\n         *\n         * @param {String} containerId id of the outer div for this question.\n         * @param {boolean} readOnly whether the question is being displayed read-only.\n         * @param {String[]} visibleDropZones the geometry of any drop-zones to show.\n         * @param {Object[]} questionLines\n         */\n        init: questionManager.init,\n    };\n});\n"],"names":["define","$","dragDrop","Line","DrawlinesQuestion","containerId","readOnly","visibleDropZones","questionLines","M","util","js_pending","this","lineSVGs","lines","svgEl","isPrinting","getRoot","classList","add","bgImage","createSvgOnImageLoad","prototype","updateCoordinates","line","length","coordinates","getSVGLineCoordinates","parse","updateSvgEl","parseCoordinates","lineType","bits","split","slice","Error","drawDropzone","rootElement","svg","querySelector","style","position","top","height","innerHTML","width","drawSVGLines","startcoordinates","endcoordinates","draginitialcoords","draghomeSvg","dropzoneSvg","undefined","coords","type","make","labelstart","labelmiddle","labelend","addToSvg","js_complete","handleResize","svgdropzones","svgdraghomes","thisQ","bgImg","bgRatio","setAttribute","parseInt","linenumber","svgline","handleElementScale","bgImgNaturalWidth","naturalWidth","bgImgClientWidth","element","document","getElementById","childNodes","getAttribute","lineNumber","makeSvg","naturalHeight","dropzoneNo","bgimage","updateSvg","handleCircleMove","e","whichHandle","info","prepare","start","movingDropZone","lastX","x","lastY","y","dragProxy","makeDragProxy","maxX","maxY","pageX","pageY","move","saveCoordsForChoice","body","removeChild","handleLineMove","isMoveFromDragsToDropzones","isMoveFromDropzonesToDrags","svgClass","movingDrag","selectedElement","dropX","dropY","clientX","clientY","touches","closestSVGs","getSvgsClosestToElement","closeTo","closest","centre1","addToDropZone","svgDropZone","svgDragsHome","dimensions","getSvgDimensionsByClass","whichSVG","moveDrags","createElement","left","appendChild","choiceNo","imageCoords","items","gEleClassAttributes","includes","value","handleKeyPress","drag","activeElement","dropzoneElement","question","questionManager","getQuestionForEvent","code","preventDefault","focus","dragSVG","className","dragElement","svgElement","img","complete","addEventListener","window","console","error","eventHandlersInitialised","lineEventHandlersInitialised","isKeyboardNavigation","questions","noOfLines","dropZones","init","dropareaimages","querySelectorAll","checkAllImagesLoaded","then","setupEventHandlers","catch","hasOwnProperty","questionContainer","contains","dropArea","handleDropZoneEventMove","handleKeyboardFocus","drags","handleDragHomeEventMove","images","promises","Array","from","map","Promise","resolve","reject","once","src","all","handleWindowResize","setTimeout","fixLayoutIfThingsMoved","event","target","dataset","isNavigating","currentTarget","attr"],"mappings":"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"}